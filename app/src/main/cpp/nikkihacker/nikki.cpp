#include <jni.h>
#include <string>
#include <codecvt>
#include <sstream>
#include <fstream>
#include <cstdio>
#include <cstdlib>
#include <filesystem>
#include <dobby.h>
#include <unwind.h>
#include <dlfcn.h>
#include "utils.h"

uintptr_t get_module_from_name(const char *name)
{
    char line[512];
    uintptr_t result = 0;
    std::string module_info;

    FILE *fd = fopen("/proc/self/maps","r");

    if (nullptr != fd) {
        memset(line, 0, sizeof(line));

        while (fgets(line,sizeof(line),fd)) {

            if (strstr(line, name)) {

                module_info = line;
                module_info = module_info.substr(0,module_info.find('-'));
                std::istringstream iss(module_info);
                iss >> std::hex >> result;
                break;
            }

            memset(line, 0, sizeof(line));
        }
    }

    return result;
}

_Unwind_Reason_Code unwind_callback(_Unwind_Context *context, void *data)
{
    Dl_info info;
    std::string filename;
    uint32_t *counter;

    if (nullptr == context) {
        return _URC_END_OF_STACK;
    }

    _Unwind_Word pc = _Unwind_GetIP(context);

    if (0 == pc) {
        return _URC_END_OF_STACK;
    }

    counter = (uint32_t *)data;

    if (*counter == 5) {
        return _URC_END_OF_STACK;
    }

    *counter += 1;

    if (dladdr((void *)pc, &info)) {
        filename = info.dli_fname;

        if (std::string::npos != filename.rfind('/')) {
            filename = filename.substr(filename.rfind('/') + 1);
        }

        DEBUG_LOG("stack walk:%s+0x%p(%p)", filename.c_str(), (void*)(pc - (uintptr_t)info.dli_fbase), (void *)pc);
    }

    return _URC_NO_REASON;
}

void create_so_dump(const char *name)
{
    char line[512];
    std::string module_info;
    std::string start_string;
    std::string end_string;
    uintptr_t start_address;
    uintptr_t end_address;
    uintptr_t last_address = 0;

    std::string dump_path = std::string("/data/data/com.shining.nikki4.tw/files/") + name + ".dump";
    std::ofstream ostream(dump_path, std::ios::binary);

    if (ostream.is_open()) {
        FILE *fd = fopen("/proc/self/maps","r");

        if (nullptr != fd) {
            memset(line, 0, sizeof(line));

            while (fgets(line,sizeof(line),fd)) {

                if (strstr(line, name)) {
                    module_info = line;

                    start_string = module_info.substr(0, module_info.find('-'));
                    std::istringstream start_stream(start_string);
                    start_stream >> std::hex >> start_address;

                    end_string = module_info.substr(module_info.find('-') + 1, module_info.find(' '));
                    std::istringstream end_stream(end_string);
                    end_stream >> std::hex >> end_address;

                    DEBUG_LOG("dump start_address:%p", (void *)start_address);
                    DEBUG_LOG("dump end_address:%p", (void *)end_address);

                    if (0 != last_address && (start_address > last_address)) {
                        for (uintptr_t i = 0; i < (start_address - last_address); i++) {
                            ostream.put('\0');
                        }
                    }

                    if (ostream.is_open()) {
                        ostream.write((char*)start_address, std::streamsize(end_address - start_address));
                    }

                    last_address = end_address;
                }

                memset(line, 0, sizeof(line));
            }
            fclose(fd);
        }
        ostream.close();
    }
}

int (*org_lua_loadx)(void *L, void *reader, void *data, const char *chunkname, const char *mode);
int fake_lua_loadx(void *L, void *reader, void *data, const char *chunkname, const char *mode)
{
    int result;
    Dl_info info;

    if (nullptr != reader) {
        if (dladdr(reader, &info)) {
            std::string filename = info.dli_fname;

            if (std::string::npos != filename.rfind('/')) {
                filename = filename.substr(filename.rfind('/') + 1);
            }

            DEBUG_LOG("lua_loadx reader:%s+0x%p", filename.c_str(), (void*)((uintptr_t)reader - (uintptr_t)info.dli_fbase));
        }
    }

    DEBUG_LOG("lua_loadx chunkname:%s", chunkname);

    DEBUG_LOG("=============stack walk start=============");
    uint32_t counter = 0;
    _Unwind_Backtrace(unwind_callback, &counter);
    DEBUG_LOG("=============stack walk end=============");

    result = org_lua_loadx(L, reader, data, chunkname, mode);

    return result;
}

uint64_t lua_counter = 0;

bool isSpecialChar(char c) {
    return !std::isalnum(static_cast<unsigned char>(c));
}

int (*org_luaL_loadbufferx)(void *L, const char *buf, size_t size, const char *name, const char *mode);
int fake_luaL_loadbufferx(void *L, const char *buf, size_t size, const char *name, const char *mode)
{
    int result;

    if (nullptr != buf && nullptr != name) {
        if (lua_counter == 5) {
            DEBUG_LOG("=============stack walk start=============");
            uint32_t counter = 0;
            _Unwind_Backtrace(unwind_callback, &counter);
            DEBUG_LOG("=============stack walk end=============");
            create_so_dump("libil2cpp.so");
        }

        lua_counter += 1;

        std::string data = std::string(buf, size);
        std::string lua_name = name;

        std::replace_if(lua_name.begin(), lua_name.end(), isSpecialChar, '-');

        std::string out_path = std::string("/data/data/com.shining.nikki4.tw/files/lua/") + lua_name + ".lua";

        std::ofstream ostream(out_path, std::ios::binary);

        if (ostream.is_open()) {
            ostream.write(data.data(), (std::streamsize)data.size());
            ostream.put('\n');
            ostream.close();
            lua_counter += 1;
        }
    }

    result = org_luaL_loadbufferx(L, buf, size, name, mode);

    return result;
}

struct System_String_Fields {
    int32_t length;
    uint16_t start_char;
};

struct System_String_o {
    void *klass;
    void *monitor;
    System_String_Fields fields;
};

struct Il2CppObject
{
    void *klass;
    void *monitor;
};

struct Il2CppArrayBounds
{
    uintptr_t length;
    uint32_t lower_bound;
};

struct System_Byte_array {
    Il2CppObject obj;
    Il2CppArrayBounds *bounds;
    uintptr_t max_length;
    uint8_t m_Items[65535];
};

typedef enum {
    conversionOK, 		/* conversion successful */
    sourceExhausted,	/* partial character in source, but hit end */
    targetExhausted,	/* insuff. room in target for conversion */
    sourceIllegal		/* source sequence is illegal/malformed */
} ConversionResult;

typedef enum {
    strictConversion = 0,
    lenientConversion
} ConversionFlags;
typedef unsigned long	UTF32;	/* at least 32 bits */
typedef unsigned short	UTF16;	/* at least 16 bits */
typedef unsigned char	UTF8;	/* typically 8 bits */
typedef unsigned char	Boolean; /* 0 or 1 */

#define UNI_SUR_HIGH_START  (UTF32)0xD800
#define UNI_SUR_HIGH_END    (UTF32)0xDBFF
#define UNI_SUR_LOW_START   (UTF32)0xDC00
#define UNI_SUR_LOW_END     (UTF32)0xDFFF

static const int halfShift  = 10; /* used for shifting by 10 bits */
static const UTF32 halfBase = 0x0010000UL;
static const UTF32 halfMask = 0x3FFUL;

#define UNI_REPLACEMENT_CHAR (UTF32)0x0000FFFD
#define UNI_MAX_BMP (UTF32)0x0000FFFF
#define UNI_MAX_UTF16 (UTF32)0x0010FFFF
#define UNI_MAX_UTF32 (UTF32)0x7FFFFFFF
#define UNI_MAX_LEGAL_UTF32 (UTF32)0x0010FFFF

static const UTF8 firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };

ConversionResult ConvertUTF16toUTF8 (
        const UTF16** sourceStart, const UTF16* sourceEnd,
        UTF8** targetStart, UTF8* targetEnd, ConversionFlags flags) {
    ConversionResult result = conversionOK;
    const UTF16* source = *sourceStart;
    UTF8* target = *targetStart;
    while (source < sourceEnd) {
        UTF32 ch;
        unsigned short bytesToWrite = 0;
        const UTF32 byteMask = 0xBF;
        const UTF32 byteMark = 0x80;
        const UTF16* oldSource = source; /* In case we have to back up because of target overflow. */
        ch = *source++;
        /* If we have a surrogate pair, convert to UTF32 first. */
        if (ch >= UNI_SUR_HIGH_START && ch <= UNI_SUR_HIGH_END) {
            /* If the 16 bits following the high surrogate are in the source buffer... */
            if (source < sourceEnd) {
                UTF32 ch2 = *source;
                /* If it's a low surrogate, convert to UTF32. */
                if (ch2 >= UNI_SUR_LOW_START && ch2 <= UNI_SUR_LOW_END) {
                    ch = ((ch - UNI_SUR_HIGH_START) << halfShift)
                         + (ch2 - UNI_SUR_LOW_START) + halfBase;
                    ++source;
                } else if (flags == strictConversion) { /* it's an unpaired high surrogate */
                    --source; /* return to the illegal value itself */
                    result = sourceIllegal;
                    break;
                }
            } else { /* We don't have the 16 bits following the high surrogate. */
                --source; /* return to the high surrogate */
                result = sourceExhausted;
                break;
            }
        } else if (flags == strictConversion) {
            /* UTF-16 surrogate values are illegal in UTF-32 */
            if (ch >= UNI_SUR_LOW_START && ch <= UNI_SUR_LOW_END) {
                --source; /* return to the illegal value itself */
                result = sourceIllegal;
                break;
            }
        }
        // TPN: substitute all control characters except for NULL, TAB, LF or CR
        if (ch && (ch != (UTF32)0x09)  && (ch != (UTF32)0x0a)  && (ch != (UTF32)0x0d)  && (ch < (UTF32)0x20) )  {
            ch = (UTF32)0x3f;
        }
        // TPN: filter out byte order marks and invalid character 0xFFFF
        if((ch == (UTF32)0xFEFF) || (ch == (UTF32)0xFFFE)|| (ch == (UTF32)0xFFFF)) {
            continue;
        }
        /* Figure out how many bytes the result will require */
        if (ch < (UTF32)0x80) {	    bytesToWrite = 1;
        } else if (ch < (UTF32)0x800) {     bytesToWrite = 2;
        } else if (ch < (UTF32)0x10000) {   bytesToWrite = 3;
        } else if (ch < (UTF32)0x110000) {  bytesToWrite = 4;
        } else {			    bytesToWrite = 3;
            ch = UNI_REPLACEMENT_CHAR;
        }
        target += bytesToWrite;
        if (target > targetEnd) {
            source = oldSource; /* Back up source pointer! */
            target -= bytesToWrite; result = targetExhausted; break;
        }
        switch (bytesToWrite) { /* note: everything falls through. */
            case 4: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
            case 3: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
            case 2: *--target = (UTF8)((ch | byteMark) & byteMask); ch >>= 6;
            case 1: *--target =  (UTF8)(ch | firstByteMark[bytesToWrite]);
        }
        target += bytesToWrite;
    }
    *sourceStart = source;
    *targetStart = target;
    return result;
}

typedef System_Byte_array *(*system_byte_array_ctor_func)(uintptr_t info, uint32_t size);
System_Byte_array *create_system_byte_array(uint32_t size)
{
    uintptr_t libil2cpp_base = get_module_from_name("libil2cpp.so");

    if (0 == libil2cpp_base) {
        DEBUG_LOG("get libil2cpp.so failed");
        return nullptr;
    }

    uintptr_t system_byte_array_info = libil2cpp_base + 0x5CC04B8;
    auto system_byte_array_ctor = (system_byte_array_ctor_func)(libil2cpp_base + 0x14FAB9C);

    system_byte_array_info = *(uintptr_t *)(system_byte_array_info);
    system_byte_array_info = *(uintptr_t *)(system_byte_array_info);

    return system_byte_array_ctor(system_byte_array_info, size);
}

uint8_t test_luajit[5518] = {
        0x1B, 0x4C, 0x4A, 0x02, 0x0A, 0xF0, 0x03, 0x00, 0x01, 0x05, 0x00, 0x0D, 0x00, 0x4E, 0x39, 0x01,
        0x00, 0x00, 0x27, 0x02, 0x02, 0x00, 0x3D, 0x02, 0x01, 0x01, 0x39, 0x01, 0x00, 0x00, 0x36, 0x02,
        0x04, 0x00, 0x39, 0x04, 0x00, 0x00, 0x39, 0x04, 0x03, 0x04, 0x0E, 0x00, 0x04, 0x00, 0x58, 0x05,
        0x01, 0x80, 0x34, 0x04, 0x00, 0x00, 0x42, 0x02, 0x02, 0x02, 0x3D, 0x02, 0x03, 0x01, 0x39, 0x01,
        0x00, 0x00, 0x36, 0x02, 0x04, 0x00, 0x39, 0x04, 0x00, 0x00, 0x39, 0x04, 0x05, 0x04, 0x0E, 0x00,
        0x04, 0x00, 0x58, 0x05, 0x01, 0x80, 0x34, 0x04, 0x00, 0x00, 0x42, 0x02, 0x02, 0x02, 0x3D, 0x02,
        0x05, 0x01, 0x39, 0x01, 0x00, 0x00, 0x36, 0x02, 0x04, 0x00, 0x39, 0x04, 0x00, 0x00, 0x39, 0x04,
        0x06, 0x04, 0x0E, 0x00, 0x04, 0x00, 0x58, 0x05, 0x01, 0x80, 0x34, 0x04, 0x00, 0x00, 0x42, 0x02,
        0x02, 0x02, 0x3D, 0x02, 0x06, 0x01, 0x39, 0x01, 0x00, 0x00, 0x36, 0x02, 0x04, 0x00, 0x39, 0x04,
        0x00, 0x00, 0x39, 0x04, 0x07, 0x04, 0x0E, 0x00, 0x04, 0x00, 0x58, 0x05, 0x01, 0x80, 0x34, 0x04,
        0x00, 0x00, 0x42, 0x02, 0x02, 0x02, 0x3D, 0x02, 0x07, 0x01, 0x39, 0x01, 0x00, 0x00, 0x36, 0x02,
        0x04, 0x00, 0x39, 0x04, 0x00, 0x00, 0x39, 0x04, 0x08, 0x04, 0x0E, 0x00, 0x04, 0x00, 0x58, 0x05,
        0x01, 0x80, 0x34, 0x04, 0x00, 0x00, 0x42, 0x02, 0x02, 0x02, 0x3D, 0x02, 0x08, 0x01, 0x39, 0x01,
        0x00, 0x00, 0x36, 0x02, 0x04, 0x00, 0x39, 0x04, 0x00, 0x00, 0x39, 0x04, 0x09, 0x04, 0x0E, 0x00,
        0x04, 0x00, 0x58, 0x05, 0x01, 0x80, 0x34, 0x04, 0x00, 0x00, 0x42, 0x02, 0x02, 0x02, 0x3D, 0x02,
        0x09, 0x01, 0x39, 0x01, 0x00, 0x00, 0x36, 0x02, 0x04, 0x00, 0x39, 0x04, 0x00, 0x00, 0x39, 0x04,
        0x0A, 0x04, 0x0E, 0x00, 0x04, 0x00, 0x58, 0x05, 0x01, 0x80, 0x34, 0x04, 0x00, 0x00, 0x42, 0x02,
        0x02, 0x02, 0x3D, 0x02, 0x0A, 0x01, 0x39, 0x01, 0x00, 0x00, 0x36, 0x02, 0x04, 0x00, 0x39, 0x04,
        0x00, 0x00, 0x39, 0x04, 0x0B, 0x04, 0x0E, 0x00, 0x04, 0x00, 0x58, 0x05, 0x01, 0x80, 0x34, 0x04,
        0x00, 0x00, 0x42, 0x02, 0x02, 0x02, 0x3D, 0x02, 0x0B, 0x01, 0x2B, 0x01, 0x01, 0x00, 0x3D, 0x01,
        0x0C, 0x00, 0x4B, 0x00, 0x01, 0x00, 0x17, 0x69, 0x73, 0x45, 0x6E, 0x74, 0x65, 0x72, 0x43, 0x6F,
        0x73, 0x6D, 0x65, 0x73, 0x4D, 0x6F, 0x64, 0x65, 0x6C, 0x14, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70,
        0x49, 0x44, 0x73, 0x4F, 0x72, 0x69, 0x67, 0x69, 0x6E, 0x16, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74,
        0x65, 0x64, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x73, 0x10, 0x6D, 0x61, 0x78, 0x43,
        0x6F, 0x73, 0x6D, 0x65, 0x49, 0x44, 0x73, 0x12, 0x6D, 0x61, 0x78, 0x43, 0x6C, 0x6F, 0x74, 0x68,
        0x65, 0x73, 0x49, 0x44, 0x73, 0x10, 0x70, 0x72, 0x65, 0x43, 0x6F, 0x73, 0x6D, 0x65, 0x49, 0x44,
        0x73, 0x12, 0x70, 0x72, 0x65, 0x43, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x49, 0x44, 0x73, 0x15,
        0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6F, 0x73, 0x6D, 0x65, 0x49, 0x44, 0x73,
        0x0B, 0x67, 0x5F, 0x63, 0x6F, 0x70, 0x79, 0x17, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64,
        0x43, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x49, 0x44, 0x73, 0x12, 0x70, 0x72, 0x65, 0x77, 0x61,
        0x72, 0x5F, 0x6D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x0E, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x4E, 0x61,
        0x6D, 0x65, 0x09, 0x64, 0x61, 0x74, 0x61, 0x22, 0x00, 0x02, 0x02, 0x00, 0x01, 0x00, 0x02, 0x3D,
        0x01, 0x00, 0x00, 0x4B, 0x00, 0x01, 0x00, 0x17, 0x69, 0x73, 0x45, 0x6E, 0x74, 0x65, 0x72, 0x43,
        0x6F, 0x73, 0x6D, 0x65, 0x73, 0x4D, 0x6F, 0x64, 0x65, 0x6C, 0x22, 0x00, 0x01, 0x02, 0x00, 0x01,
        0x00, 0x02, 0x39, 0x01, 0x00, 0x00, 0x4C, 0x01, 0x02, 0x00, 0x17, 0x69, 0x73, 0x45, 0x6E, 0x74,
        0x65, 0x72, 0x43, 0x6F, 0x73, 0x6D, 0x65, 0x73, 0x4D, 0x6F, 0x64, 0x65, 0x6C, 0x23, 0x00, 0x01,
        0x02, 0x00, 0x02, 0x00, 0x03, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02,
        0x00, 0x0F, 0x69, 0x6E, 0x69, 0x74, 0x53, 0x6B, 0x69, 0x6E, 0x49, 0x44, 0x09, 0x64, 0x61, 0x74,
        0x61, 0x22, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x03, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01,
        0x01, 0x4C, 0x01, 0x02, 0x00, 0x0E, 0x74, 0x69, 0x6D, 0x65, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x09,
        0x64, 0x61, 0x74, 0x61, 0x22, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x03, 0x39, 0x01, 0x00, 0x00,
        0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x0E, 0x6D, 0x6F, 0x64, 0x65, 0x6C, 0x4E, 0x61,
        0x6D, 0x65, 0x09, 0x64, 0x61, 0x74, 0x61, 0x24, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x03, 0x39,
        0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x10, 0x61, 0x63, 0x63, 0x65,
        0x73, 0x73, 0x4C, 0x69, 0x6D, 0x69, 0x74, 0x09, 0x64, 0x61, 0x74, 0x61, 0x1D, 0x00, 0x01, 0x02,
        0x00, 0x02, 0x00, 0x03, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00,
        0x09, 0x74, 0x61, 0x67, 0x73, 0x09, 0x64, 0x61, 0x74, 0x61, 0x20, 0x00, 0x01, 0x02, 0x00, 0x02,
        0x00, 0x03, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x0C, 0x6D,
        0x6F, 0x6D, 0x6F, 0x54, 0x69, 0x70, 0x09, 0x64, 0x61, 0x74, 0x61, 0x52, 0x00, 0x01, 0x02, 0x00,
        0x04, 0x00, 0x0A, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x0F, 0x00, 0x01, 0x00, 0x58,
        0x02, 0x03, 0x80, 0x39, 0x01, 0x02, 0x00, 0x39, 0x01, 0x03, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x36,
        0x01, 0x02, 0x00, 0x39, 0x01, 0x03, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x09, 0x4E, 0x6F, 0x6E, 0x65,
        0x14, 0x4D, 0x75, 0x73, 0x74, 0x44, 0x72, 0x65, 0x73, 0x73, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
        0x0D, 0x6D, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x09, 0x64, 0x61, 0x74, 0x61, 0x2A, 0x00,
        0x01, 0x02, 0x00, 0x02, 0x00, 0x03, 0x29, 0x01, 0x00, 0x00, 0x4C, 0x01, 0x02, 0x00, 0x4C, 0x01,
        0x02, 0x00, 0x16, 0x6D, 0x75, 0x73, 0x74, 0x43, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x4F, 0x72,
        0x54, 0x79, 0x70, 0x65, 0x09, 0x64, 0x61, 0x74, 0x61, 0xC1, 0x01, 0x00, 0x02, 0x0C, 0x00, 0x08,
        0x00, 0x19, 0x39, 0x02, 0x00, 0x00, 0x12, 0x04, 0x02, 0x00, 0x39, 0x02, 0x01, 0x02, 0x27, 0x05,
        0x02, 0x00, 0x42, 0x02, 0x03, 0x02, 0x36, 0x03, 0x03, 0x00, 0x39, 0x05, 0x04, 0x00, 0x39, 0x05,
        0x05, 0x05, 0x42, 0x03, 0x02, 0x04, 0x48, 0x06, 0x0B, 0x80, 0x12, 0x0A, 0x02, 0x00, 0x39, 0x08,
        0x06, 0x02, 0x12, 0x0B, 0x07, 0x00, 0x42, 0x08, 0x03, 0x02, 0x12, 0x0B, 0x08, 0x00, 0x39, 0x09,
        0x07, 0x08, 0x42, 0x09, 0x02, 0x02, 0x05, 0x09, 0x01, 0x00, 0x58, 0x0A, 0x02, 0x80, 0x2B, 0x0A,
        0x02, 0x00, 0x4C, 0x0A, 0x02, 0x00, 0x46, 0x06, 0x03, 0x03, 0x52, 0x06, 0xF3, 0x7F, 0x2B, 0x03,
        0x02, 0x00, 0x4C, 0x03, 0x02, 0x00, 0x11, 0x47, 0x65, 0x74, 0x53, 0x6D, 0x61, 0x6C, 0x6C, 0x54,
        0x79, 0x70, 0x65, 0x0C, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x17, 0x73, 0x65, 0x6C, 0x65,
        0x63, 0x74, 0x65, 0x64, 0x43, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x49, 0x44, 0x73, 0x09, 0x64,
        0x61, 0x74, 0x61, 0x0A, 0x70, 0x61, 0x69, 0x72, 0x73, 0x12, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72,
        0x74, 0x79, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x12, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
        0x50, 0x72, 0x6F, 0x78, 0x79, 0x0B, 0x66, 0x61, 0x63, 0x61, 0x64, 0x65, 0x84, 0x01, 0x00, 0x02,
        0x06, 0x00, 0x05, 0x00, 0x12, 0x12, 0x04, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x12, 0x05, 0x01,
        0x00, 0x42, 0x02, 0x03, 0x01, 0x39, 0x02, 0x01, 0x00, 0x39, 0x02, 0x02, 0x02, 0x0B, 0x02, 0x00,
        0x00, 0x58, 0x02, 0x03, 0x80, 0x39, 0x02, 0x01, 0x00, 0x34, 0x03, 0x00, 0x00, 0x3D, 0x03, 0x02,
        0x02, 0x36, 0x02, 0x03, 0x00, 0x39, 0x02, 0x04, 0x02, 0x39, 0x04, 0x01, 0x00, 0x39, 0x04, 0x02,
        0x04, 0x12, 0x05, 0x01, 0x00, 0x42, 0x02, 0x03, 0x01, 0x4B, 0x00, 0x01, 0x00, 0x0B, 0x69, 0x6E,
        0x73, 0x65, 0x72, 0x74, 0x0A, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x17, 0x73, 0x65, 0x6C, 0x65, 0x63,
        0x74, 0x65, 0x64, 0x43, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x49, 0x44, 0x73, 0x09, 0x64, 0x61,
        0x74, 0x61, 0x14, 0x75, 0x6E, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x43, 0x6C, 0x6F, 0x74, 0x68,
        0x65, 0x73, 0x92, 0x01, 0x00, 0x02, 0x0B, 0x00, 0x05, 0x00, 0x18, 0x39, 0x02, 0x00, 0x00, 0x39,
        0x02, 0x01, 0x02, 0x0B, 0x02, 0x00, 0x00, 0x58, 0x02, 0x03, 0x80, 0x39, 0x02, 0x00, 0x00, 0x34,
        0x03, 0x00, 0x00, 0x3D, 0x03, 0x01, 0x02, 0x36, 0x02, 0x02, 0x00, 0x39, 0x04, 0x00, 0x00, 0x39,
        0x04, 0x01, 0x04, 0x42, 0x02, 0x02, 0x04, 0x48, 0x05, 0x09, 0x80, 0x05, 0x06, 0x01, 0x00, 0x58,
        0x07, 0x07, 0x80, 0x36, 0x07, 0x03, 0x00, 0x39, 0x07, 0x04, 0x07, 0x39, 0x09, 0x00, 0x00, 0x39,
        0x09, 0x01, 0x09, 0x12, 0x0A, 0x05, 0x00, 0x42, 0x07, 0x03, 0x01, 0x58, 0x02, 0x02, 0x80, 0x46,
        0x05, 0x03, 0x03, 0x52, 0x05, 0xF5, 0x7F, 0x4B, 0x00, 0x01, 0x00, 0x0B, 0x72, 0x65, 0x6D, 0x6F,
        0x76, 0x65, 0x0A, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x0A, 0x70, 0x61, 0x69, 0x72, 0x73, 0x17, 0x73,
        0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x49, 0x44,
        0x73, 0x09, 0x64, 0x61, 0x74, 0x61, 0x59, 0x00, 0x02, 0x09, 0x00, 0x03, 0x00, 0x0D, 0x36, 0x02,
        0x00, 0x00, 0x39, 0x04, 0x01, 0x00, 0x39, 0x04, 0x02, 0x04, 0x42, 0x02, 0x02, 0x04, 0x48, 0x05,
        0x04, 0x80, 0x05, 0x06, 0x01, 0x00, 0x58, 0x07, 0x02, 0x80, 0x2B, 0x07, 0x02, 0x00, 0x4C, 0x07,
        0x02, 0x00, 0x46, 0x05, 0x03, 0x03, 0x52, 0x05, 0xFA, 0x7F, 0x2B, 0x02, 0x01, 0x00, 0x4C, 0x02,
        0x02, 0x00, 0x17, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6C, 0x6F, 0x74, 0x68,
        0x65, 0x73, 0x49, 0x44, 0x73, 0x09, 0x64, 0x61, 0x74, 0x61, 0x0A, 0x70, 0x61, 0x69, 0x72, 0x73,
        0x80, 0x01, 0x00, 0x02, 0x06, 0x00, 0x05, 0x00, 0x12, 0x12, 0x04, 0x00, 0x00, 0x39, 0x02, 0x00,
        0x00, 0x12, 0x05, 0x01, 0x00, 0x42, 0x02, 0x03, 0x01, 0x39, 0x02, 0x01, 0x00, 0x39, 0x02, 0x02,
        0x02, 0x0B, 0x02, 0x00, 0x00, 0x58, 0x02, 0x03, 0x80, 0x39, 0x02, 0x01, 0x00, 0x34, 0x03, 0x00,
        0x00, 0x3D, 0x03, 0x02, 0x02, 0x36, 0x02, 0x03, 0x00, 0x39, 0x02, 0x04, 0x02, 0x39, 0x04, 0x01,
        0x00, 0x39, 0x04, 0x02, 0x04, 0x12, 0x05, 0x01, 0x00, 0x42, 0x02, 0x03, 0x01, 0x4B, 0x00, 0x01,
        0x00, 0x0B, 0x69, 0x6E, 0x73, 0x65, 0x72, 0x74, 0x0A, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x15, 0x73,
        0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6F, 0x73, 0x6D, 0x65, 0x49, 0x44, 0x73, 0x09,
        0x64, 0x61, 0x74, 0x61, 0x12, 0x75, 0x6E, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x43, 0x6F, 0x73,
        0x6D, 0x65, 0x90, 0x01, 0x00, 0x02, 0x0B, 0x00, 0x05, 0x00, 0x18, 0x39, 0x02, 0x00, 0x00, 0x39,
        0x02, 0x01, 0x02, 0x0B, 0x02, 0x00, 0x00, 0x58, 0x02, 0x03, 0x80, 0x39, 0x02, 0x00, 0x00, 0x34,
        0x03, 0x00, 0x00, 0x3D, 0x03, 0x01, 0x02, 0x36, 0x02, 0x02, 0x00, 0x39, 0x04, 0x00, 0x00, 0x39,
        0x04, 0x01, 0x04, 0x42, 0x02, 0x02, 0x04, 0x48, 0x05, 0x09, 0x80, 0x05, 0x06, 0x01, 0x00, 0x58,
        0x07, 0x07, 0x80, 0x36, 0x07, 0x03, 0x00, 0x39, 0x07, 0x04, 0x07, 0x39, 0x09, 0x00, 0x00, 0x39,
        0x09, 0x01, 0x09, 0x12, 0x0A, 0x05, 0x00, 0x42, 0x07, 0x03, 0x01, 0x58, 0x02, 0x02, 0x80, 0x46,
        0x05, 0x03, 0x03, 0x52, 0x05, 0xF5, 0x7F, 0x4B, 0x00, 0x01, 0x00, 0x0B, 0x72, 0x65, 0x6D, 0x6F,
        0x76, 0x65, 0x0A, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x0A, 0x70, 0x61, 0x69, 0x72, 0x73, 0x15, 0x73,
        0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6F, 0x73, 0x6D, 0x65, 0x49, 0x44, 0x73, 0x09,
        0x64, 0x61, 0x74, 0x61, 0x2A, 0x00, 0x02, 0x03, 0x00, 0x02, 0x00, 0x03, 0x39, 0x02, 0x00, 0x00,
        0x3D, 0x01, 0x01, 0x02, 0x4B, 0x00, 0x01, 0x00, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74,
        0x4E, 0x61, 0x69, 0x6C, 0x53, 0x75, 0x69, 0x74, 0x49, 0x44, 0x09, 0x64, 0x61, 0x74, 0x61, 0x2A,
        0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x03, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C,
        0x01, 0x02, 0x00, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x4E, 0x61, 0x69, 0x6C, 0x53,
        0x75, 0x69, 0x74, 0x49, 0x44, 0x09, 0x64, 0x61, 0x74, 0x61, 0x1F, 0x00, 0x02, 0x03, 0x00, 0x02,
        0x00, 0x03, 0x39, 0x02, 0x00, 0x00, 0x3D, 0x01, 0x01, 0x02, 0x4B, 0x00, 0x01, 0x00, 0x0B, 0x73,
        0x6B, 0x69, 0x6E, 0x49, 0x44, 0x09, 0x64, 0x61, 0x74, 0x61, 0x1F, 0x00, 0x01, 0x02, 0x00, 0x02,
        0x00, 0x03, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x0B, 0x73,
        0x6B, 0x69, 0x6E, 0x49, 0x44, 0x09, 0x64, 0x61, 0x74, 0x61, 0x20, 0x00, 0x01, 0x02, 0x00, 0x02,
        0x00, 0x03, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x0C, 0x74,
        0x68, 0x65, 0x6D, 0x65, 0x49, 0x44, 0x09, 0x64, 0x61, 0x74, 0x61, 0x1F, 0x00, 0x01, 0x02, 0x00,
        0x02, 0x00, 0x03, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x0B,
        0x74, 0x61, 0x73, 0x6B, 0x49, 0x44, 0x09, 0x64, 0x61, 0x74, 0x61, 0x29, 0x00, 0x01, 0x02, 0x00,
        0x02, 0x00, 0x03, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x15,
        0x6D, 0x61, 0x69, 0x6E, 0x43, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x53, 0x74, 0x79, 0x6C, 0x65,
        0x09, 0x64, 0x61, 0x74, 0x61, 0x37, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x06, 0x39, 0x01, 0x00,
        0x00, 0x39, 0x01, 0x01, 0x01, 0x0E, 0x00, 0x01, 0x00, 0x58, 0x02, 0x01, 0x80, 0x34, 0x01, 0x00,
        0x00, 0x4C, 0x01, 0x02, 0x00, 0x17, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6C,
        0x6F, 0x74, 0x68, 0x65, 0x73, 0x49, 0x44, 0x73, 0x09, 0x64, 0x61, 0x74, 0x61, 0x34, 0x00, 0x01,
        0x02, 0x00, 0x02, 0x00, 0x06, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x0E, 0x00, 0x01,
        0x00, 0x58, 0x02, 0x01, 0x80, 0x34, 0x01, 0x00, 0x00, 0x4C, 0x01, 0x02, 0x00, 0x14, 0x4D, 0x61,
        0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x73, 0x4F, 0x72, 0x69, 0x67, 0x69, 0x6E, 0x09, 0x64, 0x61,
        0x74, 0x61, 0x29, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x03, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01,
        0x01, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x15, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4D,
        0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x09, 0x64, 0x61, 0x74, 0x61, 0x2D, 0x00, 0x01, 0x02,
        0x00, 0x02, 0x00, 0x03, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00,
        0x19, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x49,
        0x44, 0x53, 0x6C, 0x6F, 0x74, 0x09, 0x64, 0x61, 0x74, 0x61, 0xCC, 0x02, 0x00, 0x01, 0x0B, 0x00,
        0x09, 0x00, 0x39, 0x34, 0x01, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, 0x39, 0x04, 0x01, 0x00, 0x39,
        0x04, 0x02, 0x04, 0x42, 0x02, 0x02, 0x04, 0x48, 0x05, 0x15, 0x80, 0x0A, 0x06, 0x00, 0x00, 0x58,
        0x07, 0x13, 0x80, 0x39, 0x07, 0x01, 0x00, 0x39, 0x07, 0x03, 0x07, 0x0F, 0x00, 0x07, 0x00, 0x58,
        0x08, 0x06, 0x80, 0x36, 0x07, 0x04, 0x00, 0x39, 0x07, 0x05, 0x07, 0x12, 0x09, 0x01, 0x00, 0x12,
        0x0A, 0x06, 0x00, 0x42, 0x07, 0x03, 0x01, 0x58, 0x07, 0x09, 0x80, 0x39, 0x07, 0x01, 0x00, 0x39,
        0x07, 0x06, 0x07, 0x04, 0x07, 0x05, 0x00, 0x58, 0x07, 0x05, 0x80, 0x36, 0x07, 0x04, 0x00, 0x39,
        0x07, 0x05, 0x07, 0x12, 0x09, 0x01, 0x00, 0x12, 0x0A, 0x06, 0x00, 0x42, 0x07, 0x03, 0x01, 0x46,
        0x05, 0x03, 0x03, 0x52, 0x05, 0xE9, 0x7F, 0x39, 0x02, 0x01, 0x00, 0x39, 0x02, 0x07, 0x02, 0x0A,
        0x02, 0x00, 0x00, 0x58, 0x02, 0x14, 0x80, 0x2B, 0x02, 0x01, 0x00, 0x36, 0x03, 0x08, 0x00, 0x12,
        0x05, 0x01, 0x00, 0x42, 0x03, 0x02, 0x04, 0x58, 0x06, 0x05, 0x80, 0x39, 0x08, 0x01, 0x00, 0x39,
        0x08, 0x07, 0x08, 0x05, 0x07, 0x08, 0x00, 0x58, 0x08, 0x01, 0x80, 0x2B, 0x02, 0x02, 0x00, 0x45,
        0x06, 0x03, 0x03, 0x52, 0x06, 0xF9, 0x7F, 0x0B, 0x02, 0x01, 0x00, 0x58, 0x03, 0x06, 0x80, 0x36,
        0x03, 0x04, 0x00, 0x39, 0x03, 0x05, 0x03, 0x12, 0x05, 0x01, 0x00, 0x39, 0x06, 0x01, 0x00, 0x39,
        0x06, 0x07, 0x06, 0x42, 0x03, 0x03, 0x01, 0x39, 0x02, 0x01, 0x00, 0x2B, 0x03, 0x01, 0x00, 0x3D,
        0x03, 0x03, 0x02, 0x4C, 0x01, 0x02, 0x00, 0x0B, 0x69, 0x70, 0x61, 0x69, 0x72, 0x73, 0x15, 0x73,
        0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x19,
        0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44,
        0x53, 0x6C, 0x6F, 0x74, 0x0B, 0x69, 0x6E, 0x73, 0x65, 0x72, 0x74, 0x0A, 0x74, 0x61, 0x62, 0x6C,
        0x65, 0x0E, 0x69, 0x73, 0x55, 0x73, 0x65, 0x53, 0x6C, 0x6F, 0x74, 0x16, 0x73, 0x65, 0x6C, 0x65,
        0x63, 0x74, 0x65, 0x64, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x73, 0x09, 0x64, 0x61,
        0x74, 0x61, 0x0A, 0x70, 0x61, 0x69, 0x72, 0x73, 0x2A, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x03,
        0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x16, 0x73, 0x65, 0x6C,
        0x65, 0x63, 0x74, 0x65, 0x64, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x73, 0x09, 0x64,
        0x61, 0x74, 0x61, 0x2E, 0x00, 0x03, 0x04, 0x00, 0x02, 0x00, 0x04, 0x39, 0x03, 0x00, 0x00, 0x39,
        0x03, 0x01, 0x03, 0x3C, 0x02, 0x01, 0x03, 0x4B, 0x00, 0x01, 0x00, 0x16, 0x73, 0x65, 0x6C, 0x65,
        0x63, 0x74, 0x65, 0x64, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x73, 0x09, 0x64, 0x61,
        0x74, 0x61, 0x35, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x06, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01,
        0x01, 0x01, 0x0E, 0x00, 0x01, 0x00, 0x58, 0x02, 0x01, 0x80, 0x34, 0x01, 0x00, 0x00, 0x4C, 0x01,
        0x02, 0x00, 0x15, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6F, 0x73, 0x6D, 0x65,
        0x49, 0x44, 0x73, 0x09, 0x64, 0x61, 0x74, 0x61, 0x32, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x06,
        0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x0E, 0x00, 0x01, 0x00, 0x58, 0x02, 0x01, 0x80,
        0x34, 0x01, 0x00, 0x00, 0x4C, 0x01, 0x02, 0x00, 0x12, 0x70, 0x72, 0x65, 0x43, 0x6C, 0x6F, 0x74,
        0x68, 0x65, 0x73, 0x49, 0x44, 0x73, 0x09, 0x64, 0x61, 0x74, 0x61, 0x24, 0x00, 0x01, 0x02, 0x00,
        0x02, 0x00, 0x03, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x10,
        0x70, 0x72, 0x65, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x09, 0x64, 0x61, 0x74, 0x61,
        0x30, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x06, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01,
        0x0E, 0x00, 0x01, 0x00, 0x58, 0x02, 0x01, 0x80, 0x34, 0x01, 0x00, 0x00, 0x4C, 0x01, 0x02, 0x00,
        0x10, 0x70, 0x72, 0x65, 0x43, 0x6F, 0x73, 0x6D, 0x65, 0x49, 0x44, 0x73, 0x09, 0x64, 0x61, 0x74,
        0x61, 0x32, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x06, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01,
        0x01, 0x0E, 0x00, 0x01, 0x00, 0x58, 0x02, 0x01, 0x80, 0x29, 0x01, 0x00, 0x00, 0x4C, 0x01, 0x02,
        0x00, 0x12, 0x70, 0x72, 0x65, 0x4E, 0x61, 0x69, 0x6C, 0x53, 0x75, 0x69, 0x74, 0x49, 0x44, 0x09,
        0x64, 0x61, 0x74, 0x61, 0x27, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x03, 0x39, 0x01, 0x00, 0x00,
        0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x13, 0x70, 0x72, 0x65, 0x4E, 0x69, 0x6B, 0x6B,
        0x69, 0x53, 0x6B, 0x69, 0x6E, 0x49, 0x44, 0x09, 0x64, 0x61, 0x74, 0x61, 0x32, 0x00, 0x01, 0x02,
        0x00, 0x02, 0x00, 0x06, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x0E, 0x00, 0x01, 0x00,
        0x58, 0x02, 0x01, 0x80, 0x34, 0x01, 0x00, 0x00, 0x4C, 0x01, 0x02, 0x00, 0x12, 0x6D, 0x61, 0x78,
        0x43, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x49, 0x44, 0x73, 0x09, 0x64, 0x61, 0x74, 0x61, 0x24,
        0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x03, 0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C,
        0x01, 0x02, 0x00, 0x10, 0x6D, 0x61, 0x78, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x09,
        0x64, 0x61, 0x74, 0x61, 0x30, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x06, 0x39, 0x01, 0x00, 0x00,
        0x39, 0x01, 0x01, 0x01, 0x0E, 0x00, 0x01, 0x00, 0x58, 0x02, 0x01, 0x80, 0x34, 0x01, 0x00, 0x00,
        0x4C, 0x01, 0x02, 0x00, 0x10, 0x6D, 0x61, 0x78, 0x43, 0x6F, 0x73, 0x6D, 0x65, 0x49, 0x44, 0x73,
        0x09, 0x64, 0x61, 0x74, 0x61, 0x32, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x06, 0x39, 0x01, 0x00,
        0x00, 0x39, 0x01, 0x01, 0x01, 0x0E, 0x00, 0x01, 0x00, 0x58, 0x02, 0x01, 0x80, 0x29, 0x01, 0x00,
        0x00, 0x4C, 0x01, 0x02, 0x00, 0x12, 0x6D, 0x61, 0x78, 0x4E, 0x61, 0x69, 0x6C, 0x53, 0x75, 0x69,
        0x74, 0x49, 0x44, 0x09, 0x64, 0x61, 0x74, 0x61, 0x27, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x03,
        0x39, 0x01, 0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x13, 0x6D, 0x61, 0x78,
        0x4E, 0x69, 0x6B, 0x6B, 0x69, 0x53, 0x6B, 0x69, 0x6E, 0x49, 0x44, 0x09, 0x64, 0x61, 0x74, 0x61,
        0xE4, 0x02, 0x00, 0x01, 0x12, 0x00, 0x0F, 0x02, 0x38, 0x34, 0x01, 0x00, 0x00, 0x39, 0x02, 0x00,
        0x00, 0x39, 0x02, 0x01, 0x02, 0x0F, 0x00, 0x02, 0x00, 0x58, 0x03, 0x27, 0x80, 0x36, 0x03, 0x02,
        0x00, 0x12, 0x05, 0x03, 0x00, 0x39, 0x03, 0x03, 0x03, 0x36, 0x06, 0x02, 0x00, 0x12, 0x08, 0x06,
        0x00, 0x39, 0x06, 0x04, 0x06, 0x39, 0x09, 0x00, 0x00, 0x39, 0x09, 0x05, 0x09, 0x42, 0x06, 0x03,
        0x00, 0x41, 0x03, 0x01, 0x02, 0x0F, 0x00, 0x03, 0x00, 0x58, 0x04, 0x1B, 0x80, 0x29, 0x04, 0x01,
        0x00, 0x29, 0x05, 0x04, 0x00, 0x29, 0x06, 0x01, 0x00, 0x4D, 0x04, 0x17, 0x80, 0x36, 0x08, 0x06,
        0x00, 0x12, 0x0A, 0x03, 0x00, 0x42, 0x08, 0x02, 0x04, 0x48, 0x0B, 0x10, 0x80, 0x39, 0x0D, 0x07,
        0x0C, 0x05, 0x0D, 0x07, 0x00, 0x58, 0x0D, 0x0D, 0x80, 0x39, 0x0D, 0x08, 0x0C, 0x05, 0x0D, 0x02,
        0x00, 0x58, 0x0D, 0x0A, 0x80, 0x39, 0x0D, 0x09, 0x0C, 0x09, 0x0D, 0x00, 0x00, 0x58, 0x0D, 0x07,
        0x80, 0x36, 0x0D, 0x0A, 0x00, 0x39, 0x0D, 0x0B, 0x0D, 0x12, 0x0F, 0x01, 0x00, 0x35, 0x10, 0x0D,
        0x00, 0x39, 0x11, 0x0C, 0x0C, 0x3D, 0x11, 0x05, 0x10, 0x42, 0x0D, 0x03, 0x01, 0x46, 0x0B, 0x03,
        0x03, 0x52, 0x0B, 0xEE, 0x7F, 0x4F, 0x04, 0xE9, 0x7F, 0x15, 0x03, 0x01, 0x00, 0x09, 0x03, 0x01,
        0x00, 0x58, 0x03, 0x08, 0x80, 0x36, 0x03, 0x0A, 0x00, 0x39, 0x03, 0x0B, 0x03, 0x12, 0x05, 0x01,
        0x00, 0x35, 0x06, 0x0E, 0x00, 0x39, 0x07, 0x00, 0x00, 0x39, 0x07, 0x05, 0x07, 0x3D, 0x07, 0x05,
        0x06, 0x42, 0x03, 0x03, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07,
        0x69, 0x64, 0x0B, 0x69, 0x6E, 0x73, 0x65, 0x72, 0x74, 0x0A, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x09,
        0x74, 0x79, 0x70, 0x65, 0x10, 0x62, 0x61, 0x74, 0x74, 0x6C, 0x65, 0x5F, 0x74, 0x79, 0x70, 0x65,
        0x0D, 0x73, 0x75, 0x62, 0x69, 0x6E, 0x64, 0x65, 0x78, 0x0A, 0x70, 0x61, 0x69, 0x72, 0x73, 0x0B,
        0x74, 0x61, 0x73, 0x6B, 0x49, 0x44, 0x14, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6B, 0x54, 0x79,
        0x70, 0x65, 0x4E, 0x61, 0x6D, 0x65, 0x13, 0x67, 0x65, 0x74, 0x43, 0x6C, 0x69, 0x65, 0x6E, 0x74,
        0x53, 0x68, 0x65, 0x65, 0x74, 0x16, 0x67, 0x5F, 0x43, 0x6F, 0x6D, 0x6D, 0x6F, 0x6E, 0x54, 0x61,
        0x73, 0x6B, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x0C, 0x74, 0x68, 0x65, 0x6D, 0x65, 0x49, 0x44, 0x09,
        0x64, 0x61, 0x74, 0x61, 0x04, 0x00, 0x2B, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x03, 0x39, 0x01,
        0x00, 0x00, 0x39, 0x01, 0x01, 0x01, 0x4C, 0x01, 0x02, 0x00, 0x17, 0x69, 0x73, 0x48, 0x69, 0x64,
        0x65, 0x4D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6F, 0x6E, 0x09, 0x64, 0x61,
        0x74, 0x61, 0x5F, 0x00, 0x01, 0x06, 0x00, 0x03, 0x00, 0x0C, 0x12, 0x03, 0x00, 0x00, 0x39, 0x01,
        0x00, 0x00, 0x42, 0x01, 0x02, 0x02, 0x0B, 0x01, 0x00, 0x00, 0x58, 0x02, 0x02, 0x80, 0x2B, 0x02,
        0x00, 0x00, 0x4C, 0x02, 0x02, 0x00, 0x36, 0x02, 0x01, 0x00, 0x12, 0x04, 0x02, 0x00, 0x39, 0x02,
        0x02, 0x02, 0x12, 0x05, 0x01, 0x00, 0x44, 0x02, 0x03, 0x00, 0x10, 0x67, 0x65, 0x74, 0x54, 0x61,
        0x73, 0x6B, 0x49, 0x6E, 0x66, 0x6F, 0x16, 0x67, 0x5F, 0x43, 0x6F, 0x6D, 0x6D, 0x6F, 0x6E, 0x54,
        0x61, 0x73, 0x6B, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x0E, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6B,
        0x49, 0x44, 0x9A, 0x01, 0x00, 0x01, 0x06, 0x00, 0x05, 0x00, 0x14, 0x12, 0x03, 0x00, 0x00, 0x39,
        0x01, 0x00, 0x00, 0x42, 0x01, 0x02, 0x02, 0x0B, 0x01, 0x00, 0x00, 0x58, 0x02, 0x02, 0x80, 0x2B,
        0x02, 0x01, 0x00, 0x4C, 0x02, 0x02, 0x00, 0x36, 0x02, 0x01, 0x00, 0x12, 0x04, 0x02, 0x00, 0x39,
        0x02, 0x02, 0x02, 0x12, 0x05, 0x01, 0x00, 0x42, 0x02, 0x03, 0x02, 0x36, 0x03, 0x03, 0x00, 0x39,
        0x03, 0x04, 0x03, 0x04, 0x02, 0x03, 0x00, 0x58, 0x03, 0x02, 0x80, 0x2B, 0x03, 0x01, 0x00, 0x58,
        0x04, 0x01, 0x80, 0x2B, 0x03, 0x02, 0x00, 0x4C, 0x03, 0x02, 0x00, 0x13, 0x46, 0x75, 0x6E, 0x50,
        0x61, 0x69, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x12, 0x4D, 0x61, 0x69, 0x6E, 0x4C,
        0x65, 0x76, 0x65, 0x6C, 0x54, 0x79, 0x70, 0x65, 0x11, 0x67, 0x65, 0x74, 0x4C, 0x65, 0x76, 0x65,
        0x6C, 0x54, 0x79, 0x70, 0x65, 0x13, 0x67, 0x5F, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x50,
        0x72, 0x6F, 0x78, 0x79, 0x0E, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6B, 0x49, 0x44, 0x3A, 0x00,
        0x01, 0x04, 0x00, 0x01, 0x00, 0x09, 0x12, 0x03, 0x00, 0x00, 0x39, 0x01, 0x00, 0x00, 0x42, 0x01,
        0x02, 0x02, 0x0F, 0x00, 0x01, 0x00, 0x58, 0x02, 0x02, 0x80, 0x2B, 0x01, 0x01, 0x00, 0x4C, 0x01,
        0x02, 0x00, 0x2B, 0x01, 0x02, 0x00, 0x4C, 0x01, 0x02, 0x00, 0x13, 0x69, 0x73, 0x46, 0x75, 0x6E,
        0x50, 0x61, 0x69, 0x6E, 0x74, 0x54, 0x61, 0x73, 0x6B, 0x3A, 0x00, 0x01, 0x04, 0x00, 0x01, 0x00,
        0x09, 0x12, 0x03, 0x00, 0x00, 0x39, 0x01, 0x00, 0x00, 0x42, 0x01, 0x02, 0x02, 0x0F, 0x00, 0x01,
        0x00, 0x58, 0x02, 0x02, 0x80, 0x2B, 0x01, 0x01, 0x00, 0x4C, 0x01, 0x02, 0x00, 0x2B, 0x01, 0x02,
        0x00, 0x4C, 0x01, 0x02, 0x00, 0x13, 0x69, 0x73, 0x46, 0x75, 0x6E, 0x50, 0x61, 0x69, 0x6E, 0x74,
        0x54, 0x61, 0x73, 0x6B, 0x53, 0x00, 0x01, 0x04, 0x00, 0x02, 0x01, 0x0C, 0x12, 0x03, 0x00, 0x00,
        0x39, 0x01, 0x00, 0x00, 0x42, 0x01, 0x02, 0x02, 0x0A, 0x01, 0x00, 0x00, 0x58, 0x02, 0x05, 0x80,
        0x39, 0x02, 0x01, 0x01, 0x09, 0x02, 0x00, 0x00, 0x58, 0x02, 0x02, 0x80, 0x2B, 0x02, 0x02, 0x00,
        0x4C, 0x02, 0x02, 0x00, 0x2B, 0x02, 0x01, 0x00, 0x4C, 0x02, 0x02, 0x00, 0x14, 0x63, 0x6C, 0x6F,
        0x74, 0x68, 0x5F, 0x62, 0x67, 0x5F, 0x66, 0x6F, 0x72, 0x62, 0x69, 0x64, 0x0F, 0x67, 0x65, 0x74,
        0x54, 0x61, 0x73, 0x6B, 0x43, 0x66, 0x67, 0x02, 0x80, 0x01, 0x00, 0x01, 0x04, 0x00, 0x05, 0x00,
        0x0E, 0x12, 0x03, 0x00, 0x00, 0x39, 0x01, 0x00, 0x00, 0x42, 0x01, 0x02, 0x02, 0x0F, 0x00, 0x01,
        0x00, 0x58, 0x02, 0x05, 0x80, 0x39, 0x02, 0x01, 0x01, 0x0F, 0x00, 0x02, 0x00, 0x58, 0x03, 0x02,
        0x80, 0x39, 0x02, 0x01, 0x01, 0x4C, 0x02, 0x02, 0x00, 0x36, 0x02, 0x02, 0x00, 0x39, 0x02, 0x03,
        0x02, 0x39, 0x02, 0x04, 0x02, 0x4C, 0x02, 0x02, 0x00, 0x0A, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x16,
        0x64, 0x72, 0x65, 0x73, 0x73, 0x75, 0x70, 0x5F, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74, 0x62,
        0x67, 0x19, 0x67, 0x64, 0x43, 0x6F, 0x6D, 0x6D, 0x6F, 0x6E, 0x43, 0x6F, 0x6E, 0x66, 0x69, 0x67,
        0x63, 0x6F, 0x6D, 0x6D, 0x6F, 0x6E, 0x0D, 0x63, 0x6C, 0x6F, 0x74, 0x68, 0x5F, 0x62, 0x67, 0x0F,
        0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6B, 0x43, 0x66, 0x67, 0xF1, 0x0A, 0x03, 0x00, 0x05, 0x00,
        0x68, 0x00, 0x6D, 0x36, 0x00, 0x00, 0x00, 0x27, 0x02, 0x01, 0x00, 0x42, 0x00, 0x02, 0x02, 0x36,
        0x01, 0x02, 0x00, 0x27, 0x03, 0x03, 0x00, 0x12, 0x04, 0x00, 0x00, 0x42, 0x01, 0x03, 0x02, 0x33,
        0x02, 0x05, 0x00, 0x3D, 0x02, 0x04, 0x01, 0x33, 0x02, 0x07, 0x00, 0x3D, 0x02, 0x06, 0x01, 0x33,
        0x02, 0x09, 0x00, 0x3D, 0x02, 0x08, 0x01, 0x33, 0x02, 0x0B, 0x00, 0x3D, 0x02, 0x0A, 0x01, 0x33,
        0x02, 0x0D, 0x00, 0x3D, 0x02, 0x0C, 0x01, 0x33, 0x02, 0x0F, 0x00, 0x3D, 0x02, 0x0E, 0x01, 0x33,
        0x02, 0x11, 0x00, 0x3D, 0x02, 0x10, 0x01, 0x33, 0x02, 0x13, 0x00, 0x3D, 0x02, 0x12, 0x01, 0x33,
        0x02, 0x15, 0x00, 0x3D, 0x02, 0x14, 0x01, 0x33, 0x02, 0x17, 0x00, 0x3D, 0x02, 0x16, 0x01, 0x33,
        0x02, 0x19, 0x00, 0x3D, 0x02, 0x18, 0x01, 0x33, 0x02, 0x1B, 0x00, 0x3D, 0x02, 0x1A, 0x01, 0x33,
        0x02, 0x1D, 0x00, 0x3D, 0x02, 0x1C, 0x01, 0x33, 0x02, 0x1F, 0x00, 0x3D, 0x02, 0x1E, 0x01, 0x33,
        0x02, 0x21, 0x00, 0x3D, 0x02, 0x20, 0x01, 0x33, 0x02, 0x23, 0x00, 0x3D, 0x02, 0x22, 0x01, 0x33,
        0x02, 0x25, 0x00, 0x3D, 0x02, 0x24, 0x01, 0x33, 0x02, 0x27, 0x00, 0x3D, 0x02, 0x26, 0x01, 0x33,
        0x02, 0x29, 0x00, 0x3D, 0x02, 0x28, 0x01, 0x33, 0x02, 0x2B, 0x00, 0x3D, 0x02, 0x2A, 0x01, 0x33,
        0x02, 0x2D, 0x00, 0x3D, 0x02, 0x2C, 0x01, 0x33, 0x02, 0x2F, 0x00, 0x3D, 0x02, 0x2E, 0x01, 0x33,
        0x02, 0x31, 0x00, 0x3D, 0x02, 0x30, 0x01, 0x33, 0x02, 0x33, 0x00, 0x3D, 0x02, 0x32, 0x01, 0x33,
        0x02, 0x35, 0x00, 0x3D, 0x02, 0x34, 0x01, 0x33, 0x02, 0x37, 0x00, 0x3D, 0x02, 0x36, 0x01, 0x33,
        0x02, 0x39, 0x00, 0x3D, 0x02, 0x38, 0x01, 0x33, 0x02, 0x3B, 0x00, 0x3D, 0x02, 0x3A, 0x01, 0x33,
        0x02, 0x3D, 0x00, 0x3D, 0x02, 0x3C, 0x01, 0x33, 0x02, 0x3F, 0x00, 0x3D, 0x02, 0x3E, 0x01, 0x33,
        0x02, 0x41, 0x00, 0x3D, 0x02, 0x40, 0x01, 0x33, 0x02, 0x43, 0x00, 0x3D, 0x02, 0x42, 0x01, 0x33,
        0x02, 0x45, 0x00, 0x3D, 0x02, 0x44, 0x01, 0x33, 0x02, 0x47, 0x00, 0x3D, 0x02, 0x46, 0x01, 0x33,
        0x02, 0x49, 0x00, 0x3D, 0x02, 0x48, 0x01, 0x33, 0x02, 0x4B, 0x00, 0x3D, 0x02, 0x4A, 0x01, 0x33,
        0x02, 0x4D, 0x00, 0x3D, 0x02, 0x4C, 0x01, 0x33, 0x02, 0x4F, 0x00, 0x3D, 0x02, 0x4E, 0x01, 0x33,
        0x02, 0x51, 0x00, 0x3D, 0x02, 0x50, 0x01, 0x33, 0x02, 0x53, 0x00, 0x3D, 0x02, 0x52, 0x01, 0x33,
        0x02, 0x55, 0x00, 0x3D, 0x02, 0x54, 0x01, 0x33, 0x02, 0x57, 0x00, 0x3D, 0x02, 0x56, 0x01, 0x33,
        0x02, 0x59, 0x00, 0x3D, 0x02, 0x58, 0x01, 0x33, 0x02, 0x5B, 0x00, 0x3D, 0x02, 0x5A, 0x01, 0x33,
        0x02, 0x5D, 0x00, 0x3D, 0x02, 0x5C, 0x01, 0x33, 0x02, 0x5F, 0x00, 0x3D, 0x02, 0x5E, 0x01, 0x33,
        0x02, 0x61, 0x00, 0x3D, 0x02, 0x60, 0x01, 0x33, 0x02, 0x63, 0x00, 0x3D, 0x02, 0x62, 0x01, 0x33,
        0x02, 0x65, 0x00, 0x3D, 0x02, 0x64, 0x01, 0x33, 0x02, 0x67, 0x00, 0x3D, 0x02, 0x66, 0x01, 0x32,
        0x00, 0x00, 0x80, 0x4C, 0x01, 0x02, 0x00, 0x00, 0x10, 0x67, 0x65, 0x74, 0x49, 0x6E, 0x69, 0x74,
        0x42, 0x67, 0x49, 0x44, 0x00, 0x15, 0x69, 0x73, 0x46, 0x6F, 0x72, 0x62, 0x69, 0x64, 0x43, 0x68,
        0x61, 0x6E, 0x67, 0x65, 0x42, 0x67, 0x00, 0x17, 0x69, 0x73, 0x53, 0x68, 0x6F, 0x77, 0x53, 0x63,
        0x6F, 0x72, 0x65, 0x53, 0x75, 0x62, 0x56, 0x69, 0x65, 0x77, 0x00, 0x13, 0x69, 0x73, 0x44, 0x69,
        0x73, 0x70, 0x6C, 0x61, 0x79, 0x53, 0x63, 0x6F, 0x72, 0x65, 0x00, 0x13, 0x69, 0x73, 0x46, 0x75,
        0x6E, 0x50, 0x61, 0x69, 0x6E, 0x74, 0x54, 0x61, 0x73, 0x6B, 0x00, 0x0F, 0x67, 0x65, 0x74, 0x54,
        0x61, 0x73, 0x6B, 0x43, 0x66, 0x67, 0x00, 0x17, 0x69, 0x73, 0x48, 0x69, 0x64, 0x65, 0x4D, 0x65,
        0x6D, 0x6F, 0x72, 0x79, 0x42, 0x75, 0x74, 0x74, 0x6F, 0x6E, 0x00, 0x1A, 0x67, 0x65, 0x74, 0x44,
        0x61, 0x4D, 0x69, 0x61, 0x6F, 0x54, 0x69, 0x70, 0x50, 0x6F, 0x70, 0x75, 0x70, 0x44, 0x61, 0x74,
        0x61, 0x00, 0x16, 0x67, 0x65, 0x74, 0x4D, 0x61, 0x78, 0x4E, 0x69, 0x6B, 0x6B, 0x69, 0x53, 0x6B,
        0x69, 0x6E, 0x49, 0x44, 0x00, 0x15, 0x67, 0x65, 0x74, 0x4D, 0x61, 0x78, 0x4E, 0x61, 0x69, 0x6C,
        0x53, 0x75, 0x69, 0x74, 0x49, 0x44, 0x00, 0x13, 0x67, 0x65, 0x74, 0x4D, 0x61, 0x78, 0x43, 0x6F,
        0x73, 0x6D, 0x65, 0x49, 0x44, 0x73, 0x00, 0x13, 0x67, 0x65, 0x74, 0x4D, 0x61, 0x78, 0x4D, 0x61,
        0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x00, 0x15, 0x67, 0x65, 0x74, 0x4D, 0x61, 0x78, 0x43, 0x6C,
        0x6F, 0x74, 0x68, 0x65, 0x73, 0x49, 0x44, 0x73, 0x00, 0x16, 0x67, 0x65, 0x74, 0x50, 0x72, 0x65,
        0x4E, 0x69, 0x6B, 0x6B, 0x69, 0x53, 0x6B, 0x69, 0x6E, 0x49, 0x44, 0x00, 0x15, 0x67, 0x65, 0x74,
        0x50, 0x72, 0x65, 0x4E, 0x61, 0x69, 0x6C, 0x53, 0x75, 0x69, 0x74, 0x49, 0x44, 0x00, 0x13, 0x67,
        0x65, 0x74, 0x50, 0x72, 0x65, 0x43, 0x6F, 0x73, 0x6D, 0x65, 0x49, 0x44, 0x73, 0x00, 0x13, 0x67,
        0x65, 0x74, 0x50, 0x72, 0x65, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x00, 0x15, 0x67,
        0x65, 0x74, 0x50, 0x72, 0x65, 0x43, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x49, 0x44, 0x73, 0x00,
        0x18, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6F, 0x73, 0x6D,
        0x65, 0x49, 0x44, 0x73, 0x00, 0x19, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65,
        0x64, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x73, 0x00, 0x19, 0x67, 0x65, 0x74, 0x53,
        0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x73,
        0x00, 0x1C, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4D, 0x61, 0x6B,
        0x65, 0x75, 0x70, 0x49, 0x44, 0x4C, 0x69, 0x73, 0x74, 0x00, 0x1C, 0x67, 0x65, 0x74, 0x53, 0x65,
        0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4D, 0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x53, 0x6C,
        0x6F, 0x74, 0x00, 0x18, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4D,
        0x61, 0x6B, 0x65, 0x75, 0x70, 0x49, 0x44, 0x00, 0x17, 0x67, 0x65, 0x74, 0x4D, 0x61, 0x6B, 0x65,
        0x75, 0x70, 0x49, 0x44, 0x73, 0x4F, 0x72, 0x69, 0x67, 0x69, 0x6E, 0x00, 0x1A, 0x67, 0x65, 0x74,
        0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x49,
        0x44, 0x73, 0x00, 0x18, 0x67, 0x65, 0x74, 0x4D, 0x61, 0x69, 0x6E, 0x43, 0x6C, 0x6F, 0x74, 0x68,
        0x65, 0x73, 0x53, 0x74, 0x79, 0x6C, 0x65, 0x00, 0x0E, 0x67, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6B,
        0x49, 0x44, 0x00, 0x0F, 0x67, 0x65, 0x74, 0x54, 0x68, 0x65, 0x6D, 0x65, 0x49, 0x44, 0x00, 0x11,
        0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x53, 0x6B, 0x69, 0x6E, 0x49, 0x44, 0x00, 0x11, 0x53, 0x65,
        0x74, 0x43, 0x75, 0x72, 0x53, 0x6B, 0x69, 0x6E, 0x49, 0x44, 0x00, 0x19, 0x47, 0x65, 0x74, 0x43,
        0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x4E, 0x61, 0x69, 0x6C, 0x53, 0x75, 0x69, 0x74, 0x49, 0x44,
        0x00, 0x19, 0x53, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x4E, 0x61, 0x69, 0x6C,
        0x53, 0x75, 0x69, 0x74, 0x49, 0x44, 0x00, 0x12, 0x75, 0x6E, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74,
        0x43, 0x6F, 0x73, 0x6D, 0x65, 0x00, 0x10, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x43, 0x6F, 0x73,
        0x6D, 0x65, 0x00, 0x16, 0x69, 0x73, 0x53, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6C,
        0x6F, 0x74, 0x68, 0x65, 0x73, 0x00, 0x14, 0x75, 0x6E, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x43,
        0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x00, 0x12, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x43, 0x6C,
        0x6F, 0x74, 0x68, 0x65, 0x73, 0x00, 0x1A, 0x68, 0x61, 0x73, 0x43, 0x6C, 0x6F, 0x74, 0x68, 0x65,
        0x73, 0x42, 0x79, 0x53, 0x6D, 0x61, 0x6C, 0x6C, 0x54, 0x79, 0x70, 0x65, 0x00, 0x19, 0x67, 0x65,
        0x74, 0x4D, 0x75, 0x73, 0x74, 0x43, 0x6C, 0x6F, 0x74, 0x68, 0x65, 0x73, 0x4F, 0x72, 0x54, 0x79,
        0x70, 0x65, 0x00, 0x10, 0x67, 0x65, 0x74, 0x4D, 0x75, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x00,
        0x0F, 0x67, 0x65, 0x74, 0x4D, 0x6F, 0x6D, 0x6F, 0x54, 0x69, 0x70, 0x00, 0x0C, 0x67, 0x65, 0x74,
        0x54, 0x61, 0x67, 0x73, 0x00, 0x13, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4C,
        0x69, 0x6D, 0x69, 0x74, 0x00, 0x11, 0x67, 0x65, 0x74, 0x4D, 0x6F, 0x64, 0x65, 0x6C, 0x4E, 0x61,
        0x6D, 0x65, 0x00, 0x11, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6D, 0x65, 0x4C, 0x69, 0x6D, 0x69, 0x74,
        0x00, 0x12, 0x67, 0x65, 0x74, 0x49, 0x6E, 0x69, 0x74, 0x53, 0x6B, 0x69, 0x6E, 0x49, 0x44, 0x00,
        0x1A, 0x47, 0x65, 0x74, 0x49, 0x73, 0x45, 0x6E, 0x74, 0x65, 0x72, 0x43, 0x6F, 0x73, 0x6D, 0x65,
        0x73, 0x4D, 0x6F, 0x64, 0x65, 0x6C, 0x00, 0x1A, 0x53, 0x65, 0x74, 0x49, 0x73, 0x45, 0x6E, 0x74,
        0x65, 0x72, 0x43, 0x6F, 0x73, 0x6D, 0x65, 0x73, 0x4D, 0x6F, 0x64, 0x65, 0x6C, 0x00, 0x0F, 0x6F,
        0x6E, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x1B, 0x50, 0x72, 0x65, 0x77, 0x61, 0x72,
        0x44, 0x72, 0x65, 0x73, 0x73, 0x75, 0x70, 0x50, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6F, 0x78, 0x79,
        0x0A, 0x63, 0x6C, 0x61, 0x73, 0x73, 0x23, 0x4C, 0x75, 0x61, 0x2F, 0x4C, 0x6F, 0x67, 0x69, 0x63,
        0x2F, 0x50, 0x72, 0x6F, 0x78, 0x79, 0x2F, 0x42, 0x61, 0x73, 0x65, 0x2F, 0x50, 0x61, 0x67, 0x65,
        0x50, 0x72, 0x6F, 0x78, 0x79, 0x0C, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x00
};

System_Byte_array *(*org_Nikki_LuaLoader_ReadFile)(void *class_this, System_String_o *name);
System_Byte_array *fake_Nikki_LuaLoader_ReadFile(void *class_this, System_String_o *name)
{
    System_Byte_array *result;

    const UTF16* sourceStart = &name->fields.start_char;
    const UTF16* sourceEnd = &(&name->fields.start_char)[name->fields.length];

    UTF8 *lua_path = new UTF8[name->fields.length * 2];

    UTF8* targetStart = lua_path;
    UTF8* targetEnd = &lua_path[name->fields.length * 2];

    ConvertUTF16toUTF8(&sourceStart, sourceEnd, &targetStart, targetEnd, strictConversion);

    std::string lua_file_name = std::string((char *)lua_path, name->fields.length);

    std::transform(lua_file_name.begin(), lua_file_name.end(), lua_file_name.begin(),
                   [](unsigned char c) { return std::tolower(c); });

    if (lua_file_name.find("logic/proxy/page") != std::string::npos) {
//        DEBUG_LOG("%s found",lua_file_name.c_str());
    }

    if (lua_file_name.find("prewardressuppageproxy") != std::string::npos) {
        System_Byte_array *redirection_result = create_system_byte_array(sizeof(test_luajit));
        memcpy(redirection_result->m_Items, test_luajit, sizeof(test_luajit));
        DEBUG_LOG("%s redirection",lua_file_name.c_str());
        return redirection_result;
    }

    result = org_Nikki_LuaLoader_ReadFile(class_this, name);

    if (nullptr != result) {
        if (std::string::npos != lua_file_name.rfind('/')) {
            lua_file_name = lua_file_name.substr(lua_file_name.rfind('/') + 1);
        }

        lua_file_name += ".lua";

        std::string lua_file_path = std::string((char *)lua_path, name->fields.length);

        if (std::string::npos != lua_file_path.rfind('/')) {
            lua_file_path = lua_file_path.substr(0, lua_file_path.rfind('/') + 1);
            lua_file_path = "/data/data/com.shining.nikki4.tw/files/lua_decrypt/" + lua_file_path;
        }
        else
        {
            lua_file_path = "/data/data/com.shining.nikki4.tw/files/lua_decrypt/";
        }

        lua_file_name = lua_file_path + lua_file_name;

        try {
            if (!std::__fs::filesystem::exists(lua_file_path) ||
                std::__fs::filesystem::is_directory(lua_file_path)) {
                std::__fs::filesystem::create_directories(lua_file_path);
            }

            std::ofstream ostream(lua_file_name, std::ios::binary);

            if (ostream.is_open()) {
                ostream.write((char *) result->m_Items, (std::streamsize) result->max_length);
                ostream.close();
            }
        }
        catch (const std::exception& e) {
            DEBUG_LOG("Failed Nikki_LuaLoader_ReadFile:%s", lua_file_name.c_str());
        }
    }

    return result;
}

void *(*org_android_dlopen_ext)(const char *filepath, int flags, void *extinfo);
void *fake_android_dlopen_ext(const char *filepath, int flags, void *extinfo) {

    void* result = org_android_dlopen_ext(filepath, flags, extinfo);

    if (nullptr != result) {
        std::string filename = filepath;

        if (std::string::npos != filename.rfind('/')) {
            filename = filename.substr(filename.rfind('/') + 1);
        }

        DEBUG_LOG("dlopen so:%s", filename.c_str());

        if (filename == "libtolua.so") {
            uintptr_t libil2cpp_base = get_module_from_name("libil2cpp.so");
 //           uintptr_t lua_loadx_address = libtolua_base + 0x609F8;
 //           DobbyHook((void *)lua_loadx_address, (dobby_dummy_func_t)fake_lua_loadx, (dobby_dummy_func_t *)&org_lua_loadx);
 //           DEBUG_LOG("lua_loadx_address:%p", (void *)lua_loadx_address);

//            uintptr_t luaL_loadbufferx_address = libtolua_base + 0x4455E28; //failed
//            DobbyHook((void *)luaL_loadbufferx_address, (dobby_dummy_func_t)fake_luaL_loadbufferx, (dobby_dummy_func_t *)&org_luaL_loadbufferx);
//            DEBUG_LOG("luaL_loadbufferx_address:%p", (void *)luaL_loadbufferx_address);

            uintptr_t Nikki_LuaLoader_ReadFile_address = libil2cpp_base + 0x4455E28;
            DobbyHook((void *)Nikki_LuaLoader_ReadFile_address, (dobby_dummy_func_t)fake_Nikki_LuaLoader_ReadFile, (dobby_dummy_func_t *)&org_Nikki_LuaLoader_ReadFile);
            DEBUG_LOG("Nikki_LuaLoader_ReadFile_address:%p", (void *)Nikki_LuaLoader_ReadFile_address);
        }
    }

    return result;
}

FILE *(*org_fopen)(const char *filepath, const char *modes);
FILE *fake_fopen(const char *filepath, const char *modes)
{
    FILE *result = org_fopen(filepath, modes);

    if (nullptr != result) {
        std::string file_path = filepath;
        DEBUG_LOG("fopen file_path:%s", file_path.c_str());
    }

    return result;
}

jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
    DEBUG_LOG("Hello!");

    void *android_dlopen_ext_address = DobbySymbolResolver(nullptr, "android_dlopen_ext");
    DobbyHook(android_dlopen_ext_address, (dobby_dummy_func_t)fake_android_dlopen_ext, (dobby_dummy_func_t*)&org_android_dlopen_ext);


//    void *fopen_address = DobbySymbolResolver(nullptr, "fopen");
//    DobbyHook(fopen_address, (dobby_dummy_func_t)fake_fopen, (dobby_dummy_func_t*)&org_fopen);

    return JNI_VERSION_1_6;
}